from aiogram import types, Router, Bot, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.formatting import Bold, as_list, as_marked_section
from aiogram.filters import StateFilter
import asyncio  
import os
from aiogram.types import CallbackQuery
from database.orm_query import orm_add_user_rec_set, add_user
from sqlalchemy.ext.asyncio import AsyncSession
import logging

from kbds.inline import get_callback_btns, subscribe_button, get_multi_select_keyboard
from database.orm_query import check_recommendations_status, reset_anketa_in_db
from chat_gpt.questions import questions, QUESTION_KEYS, MULTI_OPTIONS, CALLBACK_IDS


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)



anketa_router = Router()

class Anketa(StatesGroup):
    question_1 = State()
    question_2 = State()
    question_3 = State()
    question_4 = State()
    question_5 = State()

@anketa_router.callback_query(StateFilter(None), F.data == "set_profile")
async def registration_start(callback: CallbackQuery, state: FSMContext):
    question_key = QUESTION_KEYS[0]
    await state.set_state(getattr(Anketa, question_key))
    markup = get_multi_select_keyboard(CALLBACK_IDS[question_key], set(), question_key)
    await callback.message.edit_text(
        questions[0],
        reply_markup=markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(anketa_message_id=callback.message.message_id)
    await callback.answer()


@anketa_router.callback_query(F.data.startswith("select:"))
async def toggle_selection(callback: CallbackQuery, state: FSMContext):
    try:
        _, question_key, option_key = callback.data.split(":")
        option_text = CALLBACK_IDS[question_key][option_key]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞")
        return

    data = await state.get_data()
    selected = set(data.get(f"{question_key}_selected", []))

    if option_text in selected:
        selected.remove(option_text)
    else:
        selected.add(option_text)

    await state.update_data(**{f"{question_key}_selected": list(selected)})

    markup = get_multi_select_keyboard(CALLBACK_IDS[question_key], selected, question_key)
    message_id = data.get("anketa_message_id")
    if message_id:
        await callback.bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=message_id,
            reply_markup=markup
        )
    await callback.answer()

@anketa_router.callback_query(F.data.startswith("done:"))
async def proceed_to_next_question(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω callback: {callback.data}")
    
    try:
        question_key = callback.data.split(":")[1]
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–ª—é—á –≤–æ–ø—Ä–æ—Å–∞: {question_key}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ callback_data: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return

    current_state = await state.get_state()
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {current_state}")

    if question_key not in QUESTION_KEYS:
        logger.warning(f"–í–æ–ø—Ä–æ—Å {question_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ QUESTION_KEYS")
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
        return

    next_index = QUESTION_KEYS.index(question_key) + 1
    data = await state.get_data()
    logger.info(f"–î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã: {data}")
    selected_options = data.get(f"{question_key}_selected", [])

    if not selected_options:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç!", show_alert=True)
        return
    
    message_id = data.get("anketa_message_id")
    logger.info(f"ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∫–µ—Ç–æ–π: {message_id}")

    # –ö–æ–Ω–µ—Ü –∞–Ω–∫–µ—Ç—ã
    if next_index >= len(QUESTION_KEYS):
        logger.info("–ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É...")
        try:
            await orm_add_user_rec_set(callback.from_user.id, session, data)
            logger.info("–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
            await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
            return

        if message_id:
            try:
                await callback.bot.send_chat_action(callback.message.chat.id, action="typing")
                await asyncio.sleep(1.2)
                await callback.bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=message_id,
                    text="–£—Ñ—Ñ... –í—Å–µ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–ª üìù"
                )
                await callback.bot.send_chat_action(callback.message.chat.id, action="typing")
                await asyncio.sleep(1.2)
                await callback.bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=message_id,
                    text="–Ø —Å–º–æ—Ç—Ä—é, —á—Ç–æ —Ç—ã –æ–ø—ã—Ç–Ω—ã–π –∫–∏–Ω–æ–º–∞–Ω, –Ω–æ –¥–∞–∂–µ —Ç–µ–±—è —è —Å–º–æ–≥—É —É–¥–∏–≤–∏—Ç—å üëÄ"
                )
                await callback.bot.send_chat_action(callback.message.chat.id, action="typing")
                await asyncio.sleep(1.2)
                await callback.bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=message_id,
                    text="<b>–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å</b>",
                    parse_mode="HTML",
                    reply_markup=get_callback_btns(btns={
                    "–ó–∞–ø—É—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π": "recommendations",
                    "–°–≤–æ–π –∑–∞–ø—Ä–æ—Å": "search_movie", 
                    '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é': 'my_profile'
                })
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                await callback.message.answer("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å", reply_markup=get_callback_btns(btns={
                    "–ó–∞–ø—É—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π": "recommendations",
                    "–°–≤–æ–π –∑–∞–ø—Ä–æ—Å": "search_movie", 
                    '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é': 'my_profile'
                }))
        else:
            logger.warning("message_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –Ω–æ–≤—ã–µ")
            await callback.message.answer("–£—Ñ—Ñ... –í—Å–µ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–ª üìù")
            await asyncio.sleep(1.2)
            await callback.message.answer("–Ø —Å–º–æ—Ç—Ä—é, —á—Ç–æ —Ç—ã –æ–ø—ã—Ç–Ω—ã–π –∫–∏–Ω–æ–º–∞–Ω, –Ω–æ –¥–∞–∂–µ —Ç–µ–±—è —è —Å–º–æ–≥—É —É–¥–∏–≤–∏—Ç—å üëÄ")
            await asyncio.sleep(1.2)
            await callback.message.answer(
                "<b>–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å</b>",
                parse_mode="HTML",
                reply_markup=get_callback_btns(btns={
                    "–ó–∞–ø—É—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π": "recommendations",
                    "–°–≤–æ–π –∑–∞–ø—Ä–æ—Å": "search_movie", 
                    '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é': 'my_profile'
                })
            )
        await state.update_data(preferences_priority=True)

        await state.clear()
        await callback.answer()
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_key = QUESTION_KEYS[next_index]
    await state.set_state(getattr(Anketa, next_key))
    markup = get_multi_select_keyboard(CALLBACK_IDS[next_key], set(), next_key)

    if message_id:
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=message_id,
            text=questions[next_index],
            reply_markup=markup
        )
    else:
        sent = await callback.message.answer(questions[next_index], reply_markup=markup)
        await state.update_data(anketa_message_id=sent.message_id)

    await callback.answer()





@anketa_router.message(StateFilter('*'), F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_cmd(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())


@anketa_router.callback_query(StateFilter('*'), F.data == "–ù–∞–∑–∞–¥")
async def handle_back(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()

    states_list = Anketa.__all_states__
    current_index = next((i for i, step in enumerate(states_list) if step.state == current_state), None)

    if current_index is None or current_index == 0:
        await callback.message.answer("–¢—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ. –ù–∞–∑–∞–¥ –Ω–µ–ª—å–∑—è üß±")
        await callback.answer()
        return

    previous_state = states_list[current_index - 1]
    await state.set_state(previous_state)
    await callback.message.edit_text(
        questions[current_index - 1],
        reply_markup=get_callback_btns(btns={"–ù–∞–∑–∞–¥": "–ù–∞–∑–∞–¥"})
    )

    await callback.answer()





@anketa_router.message(CommandStart())
async def start_cmd(message: types.Message, session: AsyncSession, state: FSMContext):
    await add_user(message.from_user.id, session)

    start_message=await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π <b>–ö–∏–Ω–æ–ë–æ—Ç</b> üé•\n"
        "–ü–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é, –∂–∞–Ω—Ä—É –∏–ª–∏ –¥–∞–∂–µ –µ—Å–ª–∏ ¬´–ø—Ä–æ—Å—Ç–æ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å¬ª.\n"
        "–ì–æ—Ç–æ–≤? –¢–æ–≥–¥–∞ –Ω–∞—á–Ω—ë–º! üçø", reply_markup=get_callback_btns(
            btns={
                "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å": "my_profile",
                "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ": "favourites",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "choose_option"
            }
        ))
    await state.update_data(start_message_id=start_message.message_id)
    



@anketa_router.callback_query(F.data == 'check_subscription')
async def check_sub(callback: CallbackQuery, bot: Bot, state: FSMContext):
    is_subscribed = await bot.get_chat_member(chat_id='-100' + os.getenv("TEST_CHAT_ID"), user_id=callback.from_user.id)
    if is_subscribed.status not in ['left', 'kicked', 'banned']:
        #await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        await callback.message.edit_text(
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!\n –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
        )
        await asyncio.sleep(2)
        #await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        #–Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–∫–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        
    else:
        await callback.message.edit_text(
            text="–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=subscribe_button
        )
    await callback.answer()


@anketa_router.callback_query(F.data == 'my_profile')
async def my_profile(callback: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    
    #await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    user_id = callback.from_user.id
    status = await check_recommendations_status(user_id, session)
    status = '–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' if status else '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'
    await callback.message.edit_text(
        (
            f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
            f"<b>ID:</b> <code>{user_id}</code>\n"
            #f"<b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> <i>–æ—Ç–∫–ª—é—á–µ–Ω–∞</i>\n"
            f"<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> <i>{status}</i>"
        ),
        parse_mode="HTML",
        reply_markup=get_callback_btns(
            btns={
                "–°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–∏": "reset_anketa",
                "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "to_the_main_page"
            }
        )
    )


@anketa_router.callback_query(F.data == 'to_the_main_page')
async def main_page(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    if current_state is not None:
        await callback.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å.")
        return
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é', reply_markup=get_callback_btns(
            btns={
                "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å": "my_profile",
                "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ": "favourites",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "choose_option"
            }
        ))


@anketa_router.callback_query(F.data == 'reset_anketa')
async def reset_anketa_handler(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    await reset_anketa_in_db(user_id, session)

    await callback.message.edit_text(text='–ê–Ω–∫–µ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞', reply_markup=get_callback_btns(
        btns={
            "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ": "set_profile",
            "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "to_the_main_page"
        }
    )) 
    await callback.answer()
