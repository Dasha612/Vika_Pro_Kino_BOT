from aiogram import types
import logging
import aiohttp

async def debug_image_url(url: str):
    async with aiohttp.ClientSession() as session:
        async with session.head(url) as resp:
            print(f"URL: {url}")
            print(f"Status: {resp.status}")
            print(f"Content-Type: {resp.content_type}")

logger = logging.getLogger(__name__)

    
async def is_url_valid(url: str) -> bool:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.head(url, timeout=3) as response:
                return response.status == 200
    except Exception:
        return False





async def send_movie_card(message: types.Message, movie, index: int, edit: bool = False, custom_keyboard=None) -> types.Message:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∏–ª—å–º–∞"""

    if isinstance(movie, dict):
        title = movie.get('title')
        google_search_url = f"https://www.google.com/search?q=—Å–º–æ—Ç—Ä–µ—Ç—å+—Ñ–∏–ª—å–º+{title.replace(' ', '+')}"
        poster_url = movie.get('poster') #or "https://i.imgur.com/RwD6GYr.png"
        omdb_poster = movie.get('omdb_poster') or movie.get('movie_omdb_poster')
        rating = round(float(movie.get('rating', 0)), 1) if movie.get('rating') != 'Not Found' else 'Not Found'
        year = movie.get('year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        duration = movie.get('duration', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        genres = movie.get('genres', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        description = movie.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        logger.info(f"–ò–ó –°–õ–û–í–ê–†–Ø: poster {poster_url}, ombd poster {omdb_poster}")
    else:
        logger.info(f"–¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å–º: {movie.movie_name}")
        logger.info("üîç –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ movie (ORM): %s", movie.__dict__)
        title = movie.movie_name
        google_search_url = f"https://www.google.com/search?q=—Å–º–æ—Ç—Ä–µ—Ç—å+—Ñ–∏–ª—å–º+{title.replace(' ', '+')}"
        poster_url = movie.movie_poster #or "https://i.imgur.com/RwD6GYr.png"
        omdb_poster = movie.movie_omdb_poster
        rating = round(float(movie.movie_rating), 1) if movie.movie_rating != 'Not Found' else 'Not Found'
        year = movie.movie_year
        duration = movie.movie_duration
        genres = movie.movie_genre
        description = movie.movie_description
        logger.info(f"–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•: poster {poster_url}, ombd poster {omdb_poster}")

    # üí° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–µ—Ä–∞
    for fallback_url in [poster_url, omdb_poster]:
        
        if fallback_url and await is_url_valid(fallback_url):
            poster_url = fallback_url
            break

    movie_text = (
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
        f"<b>–ì–æ–¥:</b> {year}\n"
        f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}\n"
        f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration}\n"
        f"<b>–ñ–∞–Ω—Ä—ã:</b> {genres}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
        f'<a href="{google_search_url}">üé¨ –°–º–æ—Ç—Ä–µ—Ç—å</a>'
    )
    try:
        if edit:
            msg = await message.edit_media(
                types.InputMediaPhoto(
                    media=poster_url,
                    caption=movie_text,
                    parse_mode="HTML",
                ),
                reply_markup=custom_keyboard(index)
            )
        else:
            msg = await message.answer_photo(
                photo=poster_url,
                caption=movie_text,
                reply_markup=custom_keyboard(index)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∏–ª—å–º–∞: {e}")
        msg = await message.answer_photo(
            photo="https://i.imgur.com/RwD6GYr.png",
            caption=movie_text,
            reply_markup=custom_keyboard(index)
        )

    return msg