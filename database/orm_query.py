from database.models import Users_anketa, Users, Movies, Users_interaction
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
from sqlalchemy import select, delete




#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
async def orm_add_user_rec_set(user_id: int, session: AsyncSession, data: dict):
    try:
        def get_answer(key: str) -> str:
            return ", ".join(data.get(f"{key}_selected", []))

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        mood = get_answer("question_1")
        genres = get_answer("question_2")
        era = get_answer("question_3")
        duration = get_answer("question_4")
        themes = get_answer("question_5")

        query = select(Users_anketa).where(Users_anketa.user_id == user_id)
        existing = await session.scalar(query)

        if existing:
            existing.user_rec_status = True
            existing.mood = mood
            existing.genres = genres
            existing.era = era
            existing.duration = duration
            existing.themes = themes
        else:
            new_obj = Users_anketa(
                user_id=user_id,
                user_rec_status=True,
                mood=mood,
                genres=genres,
                era=era,
                duration=duration,
                themes=themes,
            )
            session.add(new_obj)

        await session.commit()

    except Exception as e:
        await session.rollback()
        raise e




#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
async def add_user(user_id: int, session: AsyncSession):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    query = select(Users).where(Users.user_id == user_id)
    existing_user = await session.scalar(query)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    if not existing_user:
        current_time = datetime.now()
        obj = Users(
            user_id=user_id,
            user_start_date=current_time,
            user_end_date=current_time
        )
        session.add(obj)
        await session.commit()
        return obj
    
    return existing_user  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å


#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async def check_recommendations_status(user_id: int, session: AsyncSession):
    query = select(Users_anketa.user_rec_status).where(Users_anketa.user_id  == user_id)
    status = await session.scalar(query)
    return status



#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞ –≤ –±–∞–∑—É –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é
async def add_movies_by_interaction(user_id: int, movie_id: str, interaction_type: str, session: AsyncSession):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        query = select(Users_interaction).where(
            Users_interaction.user_id == user_id,
            Users_interaction.movie_id == movie_id
        )
        existing = await session.scalar(query)
        
        if existing:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            existing.interaction_type = interaction_type
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            obj = Users_interaction(
                user_id=user_id,
                movie_id=movie_id,
                interaction_type=interaction_type
            )
            session.add(obj)
        
        await session.commit()

        
    except Exception as e:
        await session.rollback()
        raise

#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é
async def get_movies_by_interaction(user_id: int, session: AsyncSession, interaction_types: list = None):
    #logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∏–ø—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {interaction_types}")
    
    # –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    query = select(Movies).join(Users_interaction).where(Users_interaction.user_id == user_id)
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç–∏–ø—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∏–º
    if interaction_types:
        query = query.where(Users_interaction.interaction_type.in_(interaction_types))
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = await session.scalars(query)
        movies = result.all()
        #logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(movies)} —Ñ–∏–ª—å–º–æ–≤")
        return movies
    except Exception as e:
        return []
    
async def delete_movies_by_interaction(user_id: int, session: AsyncSession, interaction_types: list = None, movie_id: str = None):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∏–ª—å–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–ø—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (like, dislike, unwatched)"""
    
    try:
        # –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä–∫—É —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = select(Users_interaction).where(Users_interaction.user_id == user_id)
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç–∏–ø—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∏–º
        if interaction_types:
            query = query.where(Users_interaction.interaction_type.in_(interaction_types))
            
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID —Ñ–∏–ª—å–º–∞, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
        if movie_id:
            query = query.where(Users_interaction.movie_id == movie_id)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
        result = await session.execute(query)
        interactions = result.scalars().all()

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç
        if not interactions:
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   


        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        for interaction in interactions:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            await session.execute(delete(Users_interaction).where(Users_interaction.id == interaction.id))

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await session.commit()

        #logger.info(f"–£–¥–∞–ª–µ–Ω—ã {len(interactions)} —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        await session.rollback()
        raise


#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_preferences(user_id: int, session: AsyncSession):
    query = select(Users_anketa).where(Users_anketa.user_id == user_id)
    preferences = await session.scalar(query)
    return preferences



async def add_movie(
    movie_id: str,
    movie_name: str,
    movie_description: str,
    movie_rating: float,
    movie_poster: str,
    movie_year: int,
    movie_genre: str,
    movie_duration: str,  # —Å—Ç—Ä–æ–∫–∞, –∞ –Ω–µ int
    movie_type: str,      # üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
    session: AsyncSession
):
    obj = Movies(
        imdb=movie_id,
        movie_name=movie_name,
        movie_description=movie_description,
        movie_year=movie_year,
        movie_poster=movie_poster,
        movie_rating=movie_rating,
        movie_genre=movie_genre,
        movie_duration=movie_duration,
        movie_type=movie_type     # üëà –ø–µ—Ä–µ–¥–∞—ë–º –≤ –ë–î
    )
    session.add(obj)
    await session.commit()




#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞ –≤ –±–∞–∑–µ
async def get_movie_from_db(imdb: str, session: AsyncSession):
    query = select(Movies).where(Movies.imdb == imdb)
    movie = await session.scalar(query)
    return movie

async def get_movies_from_db_by_imdb_list(imdb_ids: list[str], session: AsyncSession) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∏–ª—å–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–ø–∏—Å–∫—É IMDb ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {imdb: movie}"""
    if not imdb_ids:
        return {}

    stmt = select(Movies).where(Movies.imdb.in_(imdb_ids))
    result = await session.scalars(stmt)
    return {movie.imdb: movie for movie in result}


async def reset_anketa_in_db(user_id: int, session: AsyncSession):
    try:
        # –ò—â–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        query = select(Users_anketa).where(Users_anketa.user_id == user_id)
        anketa = await session.scalar(query)
        
        if not anketa:
            raise ValueError(f"–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –∞–Ω–∫–µ—Ç—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        anketa.user_rec_status = False  # –°—Ç–∞—Ç—É—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        anketa.mood = ""
        anketa.genres = ""
        anketa.era = ""
        anketa.duration = ""
        anketa.themes = ""
    
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await session.commit()
        return "–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞"
    
    except Exception as e:
        await session.rollback()
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–Ω–∫–µ—Ç—ã: {e}"


                                