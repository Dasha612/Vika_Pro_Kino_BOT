from aiogram import Router, Bot, types
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from handlers.callback_data import Menu_Callback

from database.orm_query import add_movies_by_interaction, get_movies_by_interaction, check_recommendations_status
from handlers.anketa import Anketa
from kbds.inline import get_callback_btns
from chat_gpt.ai import get_movie_recommendation_by_preferences
from kinopoisk_imdb.search import get_movies, extract_movie_data
from kbds.pagination import create_movie_carousel_keyboard
recommendations_router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Reccomendations(StatesGroup):
    waiting_for_action = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ
    processing = State()          # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∫–æ–µ-–ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–µ





@recommendations_router.callback_query(F.data == 'recommendations')
async def send_recommendations(callback: CallbackQuery, session: AsyncSession, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    recommendations_status = await check_recommendations_status(user_id, session)
    if not recommendations_status:
        await callback.message.answer(
            "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–±–µ —Ñ–∏–ª—å–º, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...",
            reply_markup=get_callback_btns(btns={"–î–∞–≤–∞–π": "set_profile"})
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
    chat_gpt_response = await get_movie_recommendation_by_preferences(user_id, session)
    movies_data = await get_movies(chat_gpt_response, user_id, session)
    movies = await extract_movie_data(movies_data)
    
    if not movies:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º
    message = await send_movie_card(callback.message, movies[0], 0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(Reccomendations.waiting_for_action)
    await state.update_data(
        movies=movies, 
        current_index=0,
        message_id=message.message_id,
        chat_id=message.chat.id
    )
    
    await callback.answer()

async def send_movie_card(message: types.Message, movie: dict, index: int, edit: bool = False):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∏–ª—å–º–∞"""
    title = movie['title']
    google_search_url = f"https://www.google.com/search?q=—Å–º–æ—Ç—Ä–µ—Ç—å+—Ñ–∏–ª—å–º+{title.replace(' ', '+')}"
    poster_url = movie.get('poster', 'No image available')
    if not poster_url or poster_url == 'No image available':
        poster_url = None
    
    rating = round(float(movie['rating']), 1) if movie['rating'] != 'Not Found' else 'Not Found'
    
    movie_text = (
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
        f"<b>–ì–æ–¥:</b> {movie['year']}\n"
        f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}\n"
        f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {movie['duration']}\n"
        f"<b>–ñ–∞–Ω—Ä—ã:</b> {movie['genres']}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {movie['description']}\n"
        f'<a href="{google_search_url}">üé¨ –°–º–æ—Ç—Ä–µ—Ç—å</a>'
    )

    if edit:
        try:
            return await message.edit_media(
                types.InputMediaPhoto(
                    media=poster_url,
                    caption=movie_text,
                    parse_mode="HTML"
                ),
                reply_markup=create_movie_carousel_keyboard(index)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await message.answer_photo(
                photo=poster_url,
                caption=movie_text,
                reply_markup=create_movie_carousel_keyboard(index)
            )
    else:
        return await message.answer_photo(
            photo=poster_url,
            caption=movie_text,
            reply_markup=create_movie_carousel_keyboard(index)
        )

@recommendations_router.callback_query(Menu_Callback.filter())
async def handle_movie_action(callback: CallbackQuery, callback_data: Menu_Callback, state: FSMContext, session: AsyncSession, bot: Bot):
    action = callback_data.menu_name
    current_index = callback_data.index
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    movies = data.get("movies", [])

    if not movies:
        await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    current_movie = movies[current_index]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    if action == "stop_recommendations":
        remaining_movies = movies[current_index:]
        for movie in remaining_movies:
            await add_movies_by_interaction(user_id, movie['movie_id'], 'unwatched', session)
        await state.clear()
        await callback.message.edit_text(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ!",
            reply_markup=get_callback_btns(btns={
                "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å": "my_profile",
                "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ": "favorites",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "recommendations"
            })
        )
        
    elif action in ["like", "next", "watched"]:
        interaction_type = {
            "like": "liked",
            "next": "skipped",
            "watched": "watched"
        }.get(action)
        
        await add_movies_by_interaction(user_id, current_movie['movie_id'], interaction_type, session)

        if current_index + 1 < len(movies):
            next_index = current_index + 1
            await state.update_data(current_index=next_index)
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ callback
                await send_movie_card(callback.message, movies[next_index], next_index, edit=True)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∏–ª—å–º–∞: {e}")
        else:
            await state.clear()
            await callback.message.edit_text(
                "–≠—Ç–æ –±—ã–ª–∏ –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ –∑–∞ –Ω–æ–≤—ã–º–∏ —Ñ–∏–ª—å–º–∞–º–∏.",
                reply_markup=get_callback_btns(btns={
                    "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å": "my_profile",
                    "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ": "favorites",
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "recommendations"
                })
            )

    await callback.answer()



